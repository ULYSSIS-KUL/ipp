apply plugin: 'java'
apply plugin: 'idea'

defaultTasks 'updateSubmodules', 'check', 'installDist', 'war', 'alljavadoc'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
    }
}

apply plugin: 'com.github.kt3k.coveralls'

task updateSubmodules(type: Exec) {
	commandLine 'git', 'submodule', 'update'
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
}

allprojects {
    apply plugin: 'jacoco'
}

subprojects {
    if (['Processor','Reader','UI','shared','Replayer','Publisher'].contains(name)) {
        apply plugin: 'java'

        sourceCompatibility = '1.8'
        version = '0.4'

        repositories {
            mavenCentral()
        }

        dependencies {
            // Testing dependencies
            // JUnit, duh
            testCompile group: 'junit', name: 'junit', version: '4.+'
            // Hamcrest provides assertThat
            testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.+'
            // Shazamcrest provides sameBeanAs
            testCompile group: 'com.shazam', name: 'shazamcrest', version: '0.+'
            // Mockito for mocking
            testCompile group: 'org.mockito', name: 'mockito-all', version: '1.+'
            // Hamcrest-JSON provides sameJson
            testCompile group: 'uk.co.datumedge', name: 'hamcrest-json', version: '0.+'
        }

        jacocoTestReport {
            reports {
                xml.enabled = true
                html.enabled = true
                csv.enabled = false
            }
        }
    }
}

def exportedProjects = [
    ":shared",
    ":Processor",
    ":Reader",
    ":Publisher"
]

repositories {
    jcenter()
}

configurations {
    asciidoclet
}

dependencies {
    asciidoclet 'org.asciidoctor:asciidoclet:1.+'
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    def testedProjects = exportedProjects.collect { project(it) }
    dependsOn = testedProjects.test
    sourceDirectories = files(testedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(testedProjects.sourceSets.main.output)
    executionData = files(testedProjects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

coveralls {
    def testedProjects = exportedProjects.collect { project(it) }
    sourceDirs = files(testedProjects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task alljavadoc(type: Javadoc) {
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    destinationDir = file("${buildDir}/doc/javadoc");
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
}

alljavadoc {
    options.docletpath = configurations.asciidoclet.files.asType(List)
    options.doclet = 'org.asciidoctor.Asciidoclet'
    options.addStringOption('-base-dir', "${projectDir}")
}
